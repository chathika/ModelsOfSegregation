;; Function that determines how agents evaulates location

;; The turtle calculates the fraction of friends in the neighborhood of a given patch
;; turtle procedure
to-report calc-fraction-of-friends [patch-to-evaluate]
  
  let cur-list calc-number-of-friends patch-to-evaluate
  let no-of-friends item 0 cur-list 
  let no-of-neighbors item 1 cur-list

  ifelse no-of-neighbors > 0 [
    report no-of-friends /  no-of-neighbors
  ]
  [
    report 0 ;; In case the neighborhood is empty, report 0.
  ]
end


;; reports the number of friends and the number of neighbors in the neighborhood of patch-to-evaluate
;; the function reports a list of two elements:
;; The first element is the number of friends in the patch's neighbohrood  
;; The second element is the number of neighbors
;; turtle procedure
to-report calc-number-of-friends [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let no-of-friends 0
  let no-of-neighbors 0

  foreach neighbor-patches [
    [cur-patch] ->
    let neighbor-resident [resident] of cur-patch
    if neighbor-resident != nobody [
      set no-of-neighbors no-of-neighbors + 1
      if friend? neighbor-resident [
        set no-of-friends no-of-friends + 1
      ]
    ]
  ]

  report list no-of-friends no-of-neighbors
  
end 

;; reports if the calling turtle consider the neigbor as a friend
;; turtle procedure
to-report friend? [neighbor]
  report same-color-group? neighbor
end


;; turltle procedure
;; reports if the utility of the turtle is 1
to-report happy?
  report (get-patch-utility home-patch) = 1
end

;; reports if the neighbor is of the same color groups as the calling turtle
;; turtle procedure
to-report same-color-group? [neighbor]
  report color-group = [color-group] of neighbor
end

;; reports whether the neighbor has a similar tolerance as the calling turtle
;; turtle procedure
to-report similar-tolerance? [neighbor]
  report (tolerance - [tolerance] of neighbor ) < 0.1
end

;; reports if the neighbor requires more freinds to be happy compared to the calling turtle
;; (i.e., the neighbor is less tolerant)
;; turtle procedure
to-report requires-more-friends-than-me? [neighbor]
  report tolerance < [tolerance] of neighbor
end

;; verify funcntion ****
;; reports true if the the utility of the neighbor would decrease if the calling turtle would reside in the neighbor's neighborhood 
;; in other words, a true value indicates the the neighbor would prefer that the turtle would not be in her/his neighborhood
;; turtle procedure
to-report presence-decreases-utility? [neighbor]
  let calling-turtle self
  let utility-difference 0
  
  ask neighbor [  
    let current-utility get-patch-utility home-patch
    let cur-list calc-number-of-friends home-patch   
  
    let number-of-freinds item 0 cur-list
    let no-of-neighbors item 1 cur-list
  
    let delta-no-of-neighbors 0 ;; change in the number of neighbors if the calling turtle enters or leaves 
    ifelse neighbor? calling-turtle [
      set delta-no-of-neighbors -1 ;; if they are neighbors, then we are considering a case where the calling turtle leaves
    ] [
      set delta-no-of-neighbors 1 ;; if they are not neighbors, then we are considering a case where the calling turtle enters
    ]
  
    let delta-no-of-friends 0 ;; change in the number of friends if the calling turtle enters or leaves 
    ifelse friend? calling-turtle [
      set delta-no-of-friends delta-no-of-neighbors ;; the neighbor considers the calling turtle as a friend which either leaves or enter
    ] [
      set delta-no-of-friends 0 ;; the neighbor does not consider the calling turtle as a friend (and thus the number of friends in unchanged)
    ]
    
  
    let new-fraction-of-freinds 0
    ifelse (no-of-neighbors + delta-no-of-neighbors) > 0 [
      set new-fraction-of-freinds (number-of-freinds + delta-no-of-friends) / (no-of-neighbors + delta-no-of-neighbors)
    ][
      set new-fraction-of-freinds 0
    ]
    
    let new-utility calc-utility new-fraction-of-freinds
    set utility-difference current-utility - new-utility
  ]
  report  utility-difference < 0
end


;; Reports if the other turtle is a neighbor of the calling turtle
;; turtle procedure
to-report neighbor? [other-turtle]
  let neighbor-patches [neighboring-patches] of home-patch
 
  foreach neighbor-patches [
    [cur-patch] ->
    let neighbor-resident [resident] of cur-patch
    if neighbor-resident = other-turtle [
      report true 
    ]
  ]
  
  report false  
end







