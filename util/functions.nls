;; Function that determines how agents evaulates location

;; The turtle calculates the fraction of friends in the neighborhood of a given patch
;; turtle procedure
;; @EMD @factor @return-type=float @parameter-type=patch
to-report calc-fraction-of-friends [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let my-group color-group
  let occupied-neighbor-patches neighbor-patches with [any? turtles-here]
  let no-of-friends count occupied-neighbor-patches with [[color-group] of resident = my-group]
  let no-of-neighbors count occupied-neighbor-patches
  report ifelse-value (no-of-neighbors > 0)[no-of-friends / no-of-neighbors][0]
end

;; turtle procedure
;; reports the normalized variance in threshold in the patch neighborhood
to-report variance-neighborhood-threshold [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let thresholds [[threshold] of resident] of neighbor-patches with [resident != nobody]
  report ifelse-value (length thresholds > 1) [variance thresholds] [0]
end

;; turtle procedure
;; reports the mean threshold in the patch neighborhood
to-report mean-neighborhood-threshold [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let thresholds [[threshold] of resident] of neighbor-patches with [resident != nobody]
  report ifelse-value (length thresholds > 0) [mean thresholds] [0]
end

;; turtles procedure
;; reports the normalized isolation of the patch neighborhood
;; @EMD @factor @return-type=float @parameter-type=patch
to-report neighborhood-isolation [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let no-of-isolated-patches count neighbor-patches with [resident = nobody]
  report no-of-isolated-patches / count neighbor-patches
end

;; reports the mean of the home-utility experienced by residents in this neighborhood
;; @EMD @factor @return-type=float @parameter-type=patch
to-report mean-home-utility-of-neighborhood [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let home-utilities [[home-utility] of resident] of neighbor-patches with [resident != nobody]
  report ifelse-value (length home-utilities > 0) [mean home-utilities] [0]
end

;; reports the variance of the home-utility experienced by residents in this neighborhood
to-report variance-home-utility-of-neighborhood [patch-to-evaluate]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let home-utilities [[home-utility] of resident] of neighbor-patches with [resident != nobody]
  report ifelse-value (length home-utilities > 1) [variance home-utilities] [0]
end

;; reports the distance from the home-patch
;; turtle procedure
;; @EMD @factor @return-type=float @parameter-type=patch
to-report distance-from-home-patch [patch-to-evaluate]
  report distance patch-to-evaluate / max-distance-between-patches
end

;; reports number of moves / ticks if patch-to-evaluate is not home-patch
;; reports 1-(moves/ticks) if patch-to-evaluate is home-patch
;; turtle procedure
;; @EMD @factor @return-type=float @parameter-type=patch
to-report my-tendency-to-move [patch-to-evaluate]
  if ticks = 0 [report 0]
  ifelse patch-being-evaluated = home-patch [
    report 1 - (sum my-recent-moves) / max-history-length
  ][
    report (sum my-recent-moves) / max-history-length
  ]
end

;; reports the mean neighbor age here
;; turtle procedure
;; @EMD @factor @return-type=float @parameter-type=patch
to-report mean-neighborhood-age [patch-to-evaluate]
  if ticks = 0 [report 0]
  let neighbor-patches [neighboring-patches] of patch-to-evaluate
  let neighborhood-ages [[ticks-at-current-residence] of resident] of neighbor-patches with [resident != nobody]
  report ifelse-value length neighborhood-ages > 0 [mean neighborhood-ages / (1 + max-ticks-at-current-residence)][0]
end


;; reports the patch to evaluate
;; @EMD @operator @return-type=patch
to-report get-patch-to-evaluate
 set normalizer normalizer + 1
  report patch-being-evaluated
end



;;;;;; operators ;;;;;;
;; run by a patch
;; @EMD @operator @return-type=float @parameter-type=float @parameter-type=float @structure=+,+
to-report combine [a b]
  report a  + b
end
;; run by a patch
;; takes two subscore reporters and concats them with an addition operator
;; @EMD @operator @return-type=float @parameter-type=float @structure=-
to-report negate [a]
  report -1 * a
end
;; @EMD @operator @return-type=float @parameter-type=float @parameter-type=float @interaction
to-report norm_multiply [a b]
  report a * b
end
;; @EMD @operator @return-type=float @parameter-type=float @parameter-type=float @interaction
to-report norm_divide [a b]
  report (ifelse-value (a > 0) [1 - a][-1 - a]) * (ifelse-value (b > 0) [1 - b][-1 - b])
end
